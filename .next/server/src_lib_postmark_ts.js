"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_lib_postmark_ts";
exports.ids = ["src_lib_postmark_ts"];
exports.modules = {

/***/ "./src/lib/postmark.ts":
/*!*****************************!*\
  !*** ./src/lib/postmark.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendEmail: () => (/* binding */ sendEmail),\n/* harmony export */   subscribeToNewsletter: () => (/* binding */ subscribeToNewsletter)\n/* harmony export */ });\n// Real Postmark service integration\nconst POSTMARK_API_TOKEN = process.env.POSTMARK_API_TOKEN || \"24e8278c-f9ea-46e8-bab6-d305cd74121c\";\nconst FROM_EMAIL = process.env.POSTMARK_FROM_EMAIL || \"noreply@freightflow.com\";\nasync function subscribeToNewsletter(data) {\n    try {\n        // Validation\n        if (!data.email || !data.email.includes(\"@\")) {\n            return {\n                success: false,\n                error: \"Invalid email address\"\n            };\n        }\n        if (!data.company || data.company.length < 2) {\n            return {\n                success: false,\n                error: \"Company name is required\"\n            };\n        }\n        // Send notification email to us\n        const notificationResponse = await fetch(\"https://api.postmarkapp.com/email\", {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Postmark-Server-Token\": POSTMARK_API_TOKEN\n            },\n            body: JSON.stringify({\n                From: FROM_EMAIL,\n                To: \"leads@freightflow.com\",\n                Subject: `New Manufacturing Lead: ${data.company}`,\n                TextBody: `\nNew freight calculator waitlist signup:\n\nCompany: ${data.company}\nEmail: ${data.email}\nIndustry: ${data.industry}\nMonthly Shipments: ${data.monthlyShipments || \"Not specified\"}\nCurrent Spend: ${data.currentSpend || \"Not specified\"}\n\nSigned up at: ${new Date().toISOString()}\n        `\n            })\n        });\n        if (!notificationResponse.ok) {\n            console.error(\"Postmark notification error:\", await notificationResponse.text());\n            return {\n                success: false,\n                error: \"Failed to send notification\"\n            };\n        }\n        // Send welcome email to user\n        const welcomeResponse = await fetch(\"https://api.postmarkapp.com/email\", {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Postmark-Server-Token\": POSTMARK_API_TOKEN\n            },\n            body: JSON.stringify({\n                From: FROM_EMAIL,\n                To: data.email,\n                Subject: \"Welcome to FreightFlow - Manufacturing Freight Calculator Waitlist\",\n                TextBody: `\nHi there,\n\nThanks for joining the FreightFlow waitlist! You're now in line to get early access to our manufacturing freight calculator launching in Q1 2025.\n\nWhat you can expect:\n• Early access notification 2 weeks before public launch\n• 6 months free pricing for early adopters\n• Priority ERP integration setup\n• Manufacturing freight optimization tips\n\nWe'll keep you updated on our progress. In the meantime, if you have any questions about freight optimization for ${data.company}, feel free to reply to this email.\n\nBest regards,\nThe FreightFlow Team\n\n---\nFreightFlow - Manufacturing Freight Optimization\nBuilt specifically for manufacturing SMBs\n        `\n            })\n        });\n        if (!welcomeResponse.ok) {\n            console.error(\"Postmark welcome email error:\", await welcomeResponse.text());\n        // Don't fail the signup if welcome email fails\n        }\n        const result = await notificationResponse.json();\n        return {\n            success: true,\n            messageId: result.MessageID\n        };\n    } catch (error) {\n        console.error(\"Email service error:\", error);\n        return {\n            success: false,\n            error: \"Failed to process signup. Please try again.\"\n        };\n    }\n}\nasync function sendEmail(to, subject, content) {\n    try {\n        const response = await fetch(\"https://api.postmarkapp.com/email\", {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Postmark-Server-Token\": POSTMARK_API_TOKEN\n            },\n            body: JSON.stringify({\n                From: FROM_EMAIL,\n                To: to,\n                Subject: subject,\n                TextBody: content\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Postmark API error: ${response.status}`);\n        }\n        const result = await response.json();\n        return {\n            success: true,\n            messageId: result.MessageID\n        };\n    } catch (error) {\n        console.error(\"Send email error:\", error);\n        return {\n            success: false,\n            error: \"Failed to send email\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/postmark.ts\n");

/***/ })

};
;